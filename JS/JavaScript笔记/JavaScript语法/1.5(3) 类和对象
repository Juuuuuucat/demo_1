面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个个的调用就可以了
面向对象就是把事务分成一个个对象，然后由对象之间分工与合作，就是以对象功能来划分问题，而不是步骤。
    思维特点：1、抽取对象共同的属性和行为封装成一个类，2、对类进行实例化，获取类的对象
在ES6中新增了类的概念，可以使用class关键字声明一个类，之后以这个类来实例化对象。类抽象了对象的公共部分，泛指某一大类；而对象特指某一个，通过类实例化一个具体的对象。
1、创建类
class Father {
    //类的本质其实还是一个函数，也可以简单的认为类是构造函数的另一种写法；因此类也有原型对象prototype；原型对象里有constructor指回类本身；类创造的实例对象有__proto__原型指向类的原型对象
    //所以ES6的类的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰，更像面向对象编程的语法而已。所以ES6的类其实就是语法糖（语法糖就是一种便捷写法，使一种方法的写法更加清晰、方便）
    //类的共有属性放在constructor里
    constructor(uname){ //类里面的构造函数，接受传过来的参数，返回实例对象。
        this.uname = uname;
    }
    Sing(){ //类里面的所有方法不需要写function；多个方法之间不需要添加逗号分隔
        console.log("会唱歌")
    }
}
2、生成实例
let o = new Father("刘亦菲"); //只要new生成实例，就会自动调用constructor函数，就算我们不写这个函数，类也会自动生成这个函数
3、类的继承
class Son extend Father { 
    constructor(uname, age){
        super(uname); //调用了父类中的构造函数。super关键字用于访问和调用对象父类中的函数，可以调用父类的构造函数，也可以调用父类的普通函数。super.Sing() 调用父类的方法
        this.age = age; //子类独有的属性
        //注意：子类在构造函数中使用super，必须放到this前面，也就是必须先调用父类的构造方法，再使用子类的构造方法
    }
}
    1、在继承中，如果实例化子类输出一个方法，先看子类有没有这个方法，如果有就先执行子类的；如果没有就去查找父类有没有这个方法，如果有就执行父类的这个方法(就近原则)
    2、在类中没有变量提升，所以必须先定义类，才能通过类实例化对象
    3、类里面的共有属性和方法，一定要加this使用
4、类中this的指向
    1、constructor里面的this指向的是创建的实例对象
    2、在方法中的this指向的是这个方法的调用者(不一定是创建的实例对象)
    3、一般在外面声明一个全局变量that，再在里面保存that = this，结构比较清晰