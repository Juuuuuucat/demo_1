利用typeof无法区分出null、Array和object(因为它们都得到object);除了这些类型,JS还提供了包装对象,包装对象用new创建
var a = new Number(123)//123,生成了新的包装类型,虽然看上去和原来的值一摸一样,显示出来也一摸一样,但它的类型已经变成object了,因此包装对象和原始值用===比较会返回false(如果没有写new，此时，Number()、Boolean和String()被当做普通函数，把任何类型的数据转换为number、boolean和string类型)
一、Date对象：是一个构造函数，必须用new调用，用来表示日期和时间
    var now = new Date();//获取系统当前时间,不一定准确,因为用户可以把当前时间设定为任意值
    now.getFullYear();//年份
    var now1 = new Date(2015,5,20,12,30,15,123)//创建一个指定日期和时间的Date对象,注意JS中的月份范围用整数表示是0-11,0表示一月
    时间戳：一个自增的整数,它表示从1970年1月1日零时整的GMT时区开始的那一刻,到现在的毫秒数。
二、正则表达式
    1、正则表达式是用于匹配字符串中字符组合的模式。在JS中，正则表达式也是对象。
    通常被用来检索、替换那些符合某个模式(规则)的文本，例如验证表单、过滤页面内容中的一些敏感词、获取想要的特定部分等。
    2、RegExp对象：是描述字符模式的对象
    构建正则表达式有两种方法：
        1、字面量创建：const re = /pattern/flags;
        2、调用RegExp对象的构造函数：const re = new RegExp(pattern,flags);
    其中flags包含三个(可以多个使用)：
        1、g表示全局模式,即模式将应用于所有字符串
        2、i表示不区分大小写
        3、m表示多行模式,即在达到一行文本末尾时还会继续查找下一行是否存在与模式匹配的项
    3、RegExpObj.test(str) //判断str是否符合该正则表达式的规则，返回true或false
    4、/abc/ 只要包含"abc"这个字符串就匹配
    /^abc/ 匹配以"abc"开头的字符串(^)
    /abc&/ 匹配以"abc"结尾的字符串(&)
    /^abc&/ 只匹配"abc"这个字符串
    /[abc]/ 表示[]里面只要匹配a、b、c其中一个就可以了
    /^[abc]&/ 只有"a"、"b"、"c"这三个字母才匹配
    /^[a-z]&/ 表示匹配从"a"到"z"任意一个字母;(-)表示范围符
    /^[a-zA-Z]&/ 表示26个英文字母大小写都匹配
    /^[^a-zA-Z]&/ 注意如果^符号写在中括号里面，表明取反的意思，因此这个正则表示了不能匹配26个英文字母大小写任意一个
    量词符：* 出现(>=0)次; + 出现(>=1)次; ? 出现(0||1)次
    {3} 重复3次 {3,} 重复至少3次 {3,16} 重复3~16次
    /^(abc){3}&/ ()表示优先级，这里匹配"abcabcabc"
    5、替换
    let str = 'andy and red';
    let str2 = str.replace('andy', 'baby')
    console.log(str2); //'baby and red'
    其实这个方法的第一个参数还可以正则表达式'/andy/'
三、JSON(JS对象表示法):用来作为数据交换的文本格式，作用类似XML，它不是一种编程语言，仅用来描述数据结构(语法规则)
    1、数据类型
    number、Boolean、string、null、array、object以及它们的任意组合(简单值使用与JavaScript相同的语法，可以在JSON中表示字符串、数值、布尔值和null)
    2、JSON中字符集必须是UTF-8,规定字符串必须用双引号"",object的键也必须用""。JS内置了JSON的解析,可以直接在JS中使用JSON。
    3、把任何JS对象变成JSON,就是把这个对象序列化成一个JSON格式的字符串,这样才能够通过网络传递给其他计算机。如果收到一个JSON格式的字符串,只需要把它反序列化成一个JavaScript对象,就可以在JavaScript中直接使用这个对象了。
        1、序列化   js-->json对象
        JSON.stringify(obj[,控制筛选对象的键值,按缩进输出])
        2、反序列化   json-->js对象
        JSON.parse('JSON序列化的字符'[,用来转换解析出的属性的函数])
