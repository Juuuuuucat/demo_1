JS的变量数据类型只有在程序运行过程中，根据等号右边的值来确认，而且变量的数据类型是可变的
一、基本类型(原始数据类型)
1、Number
    整数型、浮点类型、NaN（不是数值，表示本来要返回数值的操作失败了，而不是抛出错误）、infinity（无限大）
2、string
    单引号、双引号、反引号(多行字符串)标示。字符串的值是不可变的，就是一旦创建就不能被改变
3、boolean
    true:非零数值、非空字符串、任意对象
    false:0、NaN、null、undefined、""
4、undefined
    当使用var或let声明了变量但没有初始化时，就相当于给变量赋予了undefined值;包含undefined值的变量跟没有定义变量是有区别的。
5、null
    逻辑上讲，null值表示一个空对象指针，给typeof传一个null会返回object。只要变量要保存对象，而当时又没有对象可保存，就可以用null来填充该变量。
6、symbol
    每个从symbol()返回的symbol值都是唯一的、不可变的。一个symbol值能作为对象属性的标识符。符号的用途是确保对象属性使用唯一标识符。
二、引用类型(复合数据类型)
1、object
    无序的集合数据类型，由若干键值对{key:value,key:value,..}组成,动态大小，对象的所有属性都是字符串，属性对应的值可以是任意数据类型
2、Array
    数组可以存储任意类型的数据，并且数组是动态大小，会随着数据添加而自动增加
3、function
    每个函数都是function的实例，function也有属性和方法
4、其他引用类型:Date、RegExp、Map、Set等
三、存储区别
    (在JavaScript内部，所有数字都是以64位浮点数形式储存)
    在内存中的位置不同：
    1、基本数据类型存储在栈中，在栈中存放的是对应的值
        例如a是一个基本类型，将a赋给b，虽然两个变量的值相等，但是两个变量保存了两个不同的内存地址（简单类型赋值，是生成相同的值，两个对象对应不同的地址）
    2、引用类型的对象存储在堆中，在栈中存放的是指向堆内存的地址（十六进制表示）
        每个堆内存中有一个引用地址，该引用地址存放在栈中。例如obj1是一个引用类型，赋值给了obj2，实际是将堆内存对象在栈内存的引用地址复制了一份给了obj2，它们共同指向了同一个堆内存对象，因此更改obj2会对obj1产生影响（复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象）
    3、简单数据类型传参
        函数的形参也可以看作一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做出的修改，都不会影响到外部变量。
    4、复杂类型传参
        函数的形参也可以看作一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象
四、浮点数精度丢失问题
    经典题：0.1 + 0.2 === 0.3; //false
        因为在JavaScript语言中，0.1和0.2都转化成二进制后在进行运算，再转换成十进制是0.30000..0004，所以输出false
    比如一个数1/3=0.3333...3会一直循环，数学可以表示，但是计算机要存储，0.333...这个数无限循环，再大的内存它也存不下，所以不能存储一个相对于数学来说的值，只能存储一个近似值，当计算机存储后再取出时就会出现精度丢失问题
    计算机存储双精度浮点数需要把十进制数转换为二进制的科学计数法的形式，然后计算机以自己的规则存储二进制的科学计数法；因为存储时有位数限制(64位)，并且某些十进制的浮点数在转换为二进制时会出现无限循环，会造成二进制的舍入操作(0舍1入)，当再转换为十进制时就造成了计算误差
五、symbol 表示独一无二的值，是一种类似于字符串的数据类型
    特点：
		1、symbol的值是唯一的，用来解决命名冲突的问题
		2、symbol的值不能与其他数据进行运算、对比
		3、symbol定义的对象属性不能使用for..in 循环遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名

		//创建symbol
		let s = Symbol()
		let s2 = Symbol('加油学习')
		let s3 = Symbol('加油学习')
		s2 === s3 //false

		//Symbol.for 创建
		let s4 = Symbol.for('尚硅谷')
		let s5 = Symbol.for('尚硅谷')
		s4 === s5 //true

		//向对象中添加方法 