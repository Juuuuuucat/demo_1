字符串的特点就是一旦创建了,就不可变;也就是说里面的值不变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间，原来的空间中还是存储了刚开始的字符串；因此不要随便大量拼接，浪费内存空间。
因此字符串的所有方法都不会修改字符串本身，操作完成会返回一个新的字符串。
字符串长度：字符串.length
按道理来说基本数据类型是没有属性和方法的，对象才有，但是字符串却可以直接使用length属性，这是因为JS会把基本数据类型包装为复杂数据类型，执行过程如下：
    1、生成临时变量，把简单类型包装为复杂数据类型
        var temp = new String(字符串);
    2、赋值给我们声明的字符变量 //但是这个字符变量还是String类型..
        字符串变量 = temp;
    3、摧毁这个临时变量
        temp = null;
一、操作方法
    1、增(并不是直接增添内容,而是创建一个副本再进行操作,除了+和${}进行拼接外)
        1、+：只要其中一项是字符串类型，最终的结果就是字符串类型
        2、concat():将一个或多个字符串拼接成一个新字符串,返回新字符串
    2、删(并不是说删除原字符串的内容,而是创建字符串的一个副本,进行操作后返回新的字符串)
        1、slice(开始参数,结束参数) 左闭右开
        2、substr(start, length)
        从start位置开始（索引号），取出length个字符
        如果没有length值，则取到末尾
        3、substring(start, end) 左闭右开

    3、改(不是改变原字符串,而是创建字符串的一个副本,再进行操作)
        1、trim()、trimlLeft()、trimRight()
        删除前、后或前后所有空格符,再返回新的字符串。不会删除字符串中间的空格
        2、repeat(n)
        接收一个整数参数,表示要将字符串复制n次,然后返回拼接所有副本后的字符串
        3、padStart(length, padding)、padEnd()
        复制字符串,如果小于指定长度,则在相应一边填充字符padding,直至满足长度条件
        4、toLowerCase()、toUpperCase()
        大小写转化，没有参数，传入参数也没用
    4、查(除了通过索引的方式获取字符串的值)
        1、charAt()
        传入一个整数,返回给定索引位置的字符
            charCodeAt()
            返回指定位置的字符的ASCII码
        2、indexOf()
        传入待查字符,从字符串开头去搜索传入的字符,并返回位置,没有找到就返回-1
        3、startsWith()/endsWith()
        查看是否以传入字符开头/结尾,是返回true,不是就返回false
        4、includes()
        查看是否包含传入字符,是返回true,不是就返回false
二、转换方法
    split()
    传入分割符，把字符串按照指定的分割符拆分成“数组”的每一项
三、模块匹配方法
    1、match()
    接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，返回数组
    2、search()
    接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，找到则返回匹配索引，否则返回 -1
    3、replace()
    接受两个参数(第一个匹配的内容，替换的元素[可用函数])
四、模板字符串：使用反引号定义，可以解析变量，而不需要字符拼接（新的声明字符串的方式）
    1、内容中可以直接出现换行符
    let str = `<ul>
                 <li>学习</li>
               </ul>`;
    2、变量拼接
    let name = 'wang';
    let say = `hello,my name is ${name}`;
    console.log(say); //hello,my name is wang
    3、还可以调用函数：
        let say = function(){
            return 'hello';
        };
        let s = `${say()},你好`;
        console.log(s); //'hello,你好'