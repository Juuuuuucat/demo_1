一、强制转换(显式转换):也就是我们很清楚可以看到这里发生了类型的转变
    1、Number(变量):将任意类型的值转化为数值(也可以直接 变量-0 或者 变量*1 实现隐式转换)
        undefined------NaN
        null-----------0
        true-----------1
        false----------0
        string---------如果可以被解析为数值，则转换为相应的数值,如果不可以被解析为数值，返回 NaN,空字符串转为0
        Object---------先调用toPrimitive,再调用toNumber,通常转换成NaN,除了只包含单个数值的数组
        symbol---------Throw a TypeError exception
    2、parseInt(变量)
        相比Number，就没那么严格了，parseInt函数逐个解析字符，遇到不能转换的字符就停下来(如果第一个就不能转换，则返回NaN)
            parseInt(123.9); // 123，遇到小数点就停止
            parseInt('3.88'); // 3
            parseInt('n123'); // NaN
            还有一个parseFloat()用于转换为浮点数
            parseFloat(123.4); // 123.4
            parseFloat('123.9n'); //123.9
            parseFloat('n123.4'); // NaN
    3、String(变量):可以将任意类型的值转化成字符串
        number---------对应的字符串
        undefined------"undefined"
        null-----------"null"
        true-----------"true"
        false----------"false"
        string---------string
        Object---------先调用toPrimitive,再调用toNumber
        symbol---------Throw a TypeError exception
            除了String(变量), 还有 变量.toString() 也可以转换，一种比较方便的方法是直接 +'';(隐式转换)
    4、boolean(变量)
    可以将任意类型的值转为布尔值
        非零数值、非空字符串、任意对象----true
        0、NaN、null、undefined、""-----false
二、自动转换(隐式转换)

两种发生隐式转换的场景:
    比较运算(==、!=、>、<)、if、while需要布尔值的地方
    算术运算(+、-、*、/、%)

    1、自动转换为布尔值
        在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用Boolean函数
            在逻辑运算中，如果是布尔值参与的逻辑运算，返回true或false；如果是值或者表达式参与逻辑运算，会出现短路现象（逻辑中断），返回相应的值
                表达式1 && 表达式2 //如果表达式1为真，返回表达式2
                表达式1 || 表达式2 //如果表达式1为真，则直接返回表达式1
    2、自动转换成字符串
        先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串,常发生在"+"运算中，一旦存在字符串，则会进行字符串拼接操作
    3、自动转换成数值
        除了+有可能转为字符串，其他运算符都会自动转成数值- * / >= <=