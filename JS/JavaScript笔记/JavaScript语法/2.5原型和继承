JS常被描述为一种基于原型的语言---每个对象拥有一个原型对象。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。
函数可以有属性。每个函数都有一个特殊的属性叫做原型prototype
//function.prototype
{
    constructor: ƒ doSomething(), //可以看到原型对象有一个自带属性constructor，这个属性指向构造函数
    __proto__: {
        constructor: ƒ Object(),
        hasOwnProperty: ƒ hasOwnProperty(),
        isPrototypeOf: ƒ isPrototypeOf(),
        propertyIsEnumerable: ƒ propertyIsEnumerable(),
        toLocaleString: ƒ toLocaleString(),
        toString: ƒ toString(),
        valueOf: ƒ valueOf()
    }
}
JS中不区分类和实例的概念，而是通过原型(prototype)来实现面向对象编程:（__proto__都是用来指向创建它的构造函数的原型对象prototype）
    xiaoming.__proto__=student//将xiaoming的原型指向对象student,看上去xiaoming仿佛是从student继承下来的xiaoming---prototype---->student
    一般我们不要直接用obj.__proto__去改变一个对象的原型，低版本的IE也无法使用__proto__; Object.create()方法可以传入一个原型对象，并创建(返回)一个基于该原型的新对象，

JS的原型链和java的class区别就在，它没有class的概念，所有对象都是实例，所谓继承关系不过就是把一个对象的原型指向另一个对象而已
一、创建对象
    JS对每个创建的对象都会设置一个原型,并指向它的原型对象
    当用obj.xxx访问对象的属性时，JS引擎先在该对象上查找该属性，如果没有找到，就到它的原型对象上找，还没有找到，就一直上溯到Object.prototype对象，最后还没有找到，就只能返回undefined，(原型对象有一个自有属性constructor，这个属性指向实例对象的构造函数)例如：
        var arr=[1,2];//原型链是arr-->Array.prototype-->Object.prototype-->null
        function f(){}//原型链是f-->Function.prototype-->Object.prototype-->null；如果原型链很长，那么访问一个对象的属性就会因为花更多的时间查找而变得很慢，因此注意不要把原型链搞得太长
    除了使用obj{}来创建对象，还可以使用构造函数，注意调用时一定要用关键字"new"(var obj = new foo('小明'))如果不写，它就是一个普通函数
        [new关键字主要做了以下工作：
            创建一个新的对象obj、新对象原型指向构造函数原型对象、将构造函数中的this绑定到obj上、(根据构建函数返回类型判断，如果没有return，将新创建对象返回，如果return原始值就返回空对象，如果return一个对象，需要正常返回)]
    一切对象都是继承自Object对象，Object 对象直接继承根源对象null
    一切的函数对象（包括 Object 对象），都是继承自 Function 对象
    Object 对象直接继承自 Function 对象
    Function对象的__proto__会指向自己的原型对象，最终还是继承自Object对象
二、原型链继承
    常见的继承方式之一，其中涉及构造函数、原型和实例，三者之间存在一定的关系：每一个构造函数都有一个原型对象prototype，原型对象又包含一个指向构造函数的的指针(constructor)，而实例包含一个指针(__proto__)指向了构造函数的原型对象。
三、构造函数继承
    借助call。Father.call()父类的引用属性不会被共享，优化了原型链继承方式的弊端，但是只能继承父类的实例属性和方法，不能继承原型属性或者方法
