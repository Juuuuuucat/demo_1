在执行JavaScript代码的时候，有些情况下会发生错误：
    一种是程序写的逻辑不对，导致代码执行异常
    另一种是在执行过程中，程序遇到无法预测的异常情况而报错。
1、高级语言提供了抽象的错误处理逻辑try..catch..finally
    当代码块被try{..}包裹的时候，就表示这部分代码执行过程中可能会发生错误，如果没有错误发生，try执行完后会执行finally代码；一旦发生错误，就不再继续执行后续代码，转而跳到catch块。catch(e){..}包裹的代码就是错误处理代码，变量e表示捕获到的错误(这里的e是习惯用法，可以用其他变量)。最后，无论有没有错误，finally一定会被执行。
    （catch和finally可以不必都出现）
2、错误类型
    JavaScript有一个标准的Error对象表示错误，还有从Error派生的TypeError、ReferenceError等错误对象。
3、抛出错误
    程序也可以主动抛出一个错误，让执行流程直接跳转到catch块。抛出错误使用throw语句：
    throw new Error('输入错误')
    实际上，JS允许抛出任意对象，包括数字、字符串。但是最好还是抛出一个Error对象。
4、错误传播
    如果在一个函数内部发生了错误，它自身没有捕获，错误就会被抛到外层调用函数；如果外层也没有捕获，该错误会一直沿着函数调用链向上抛出，直到被JS引擎捕获，代码终止执行。因此，我们不必在每一个函数内部捕获错误，只需要在合适的地方来个统一捕获。
    