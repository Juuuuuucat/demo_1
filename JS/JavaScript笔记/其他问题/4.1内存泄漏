一、内存泄漏
    在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存（当已经不需要某块内存时这块内存还存在着，没有被释放，导致该内存无法被使用，就叫内存泄漏）
    并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。对于持续运行的服务进程，必须及时释放不再使用的内存，否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃
二、垃圾回收机制
    在JS中创建一个变量时，会自动分配内存空间，当变量不再被使用时，垃圾回收机制会自动释放相应的内存空间。
    JavaScript具有自动垃圾回收机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。原理：垃圾收集器会定期(周期性)找出那些不再继续使用的变量，然后释放其内存。两种判断变量不再使用的方式：
        1、标记清除(最常用)
        当变量进入执行环境时，就标记这个变量为"进入环境"。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为"离开环境"。标记为“离开环境”的变量可以被回收
        垃圾回收机制运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量以及被在上下文中的变量引用的变量的标记去掉。之后再被加上标记的变量就是待删除的，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值以及收回它们的内存
        
        标记阶段：垃圾回收器会从根对象开始遍历(在js中，通常认定全局对象window做为根)。每一个可以从根对象访问到的对象都会被添加一个标识，于是这个对象就被标识为可到达对象。
        清除阶段：垃圾回收器会对堆内存从头到尾进行线性遍历，如果发现有对象没有被标识为可到达对象，那么就将此对象占用的内存回收，并且将原来标记为可到达对象的标识清除，以便进行下一次垃圾回收操作。
        2、引用计数
        引擎中有一张"引用表"，保存了内存里面所有的资源(通常是各种值)的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放。
        如果一个值不再需要了，引用数却不为0，垃圾回收机制无法释放这块内存，从而导致内存泄漏，比如：（当声明了一个变量并且将一个引用类型赋值给该变量时，这个值的引用次数就为 1）
            var arr=[1,2,3]; //数组[1,2,3]是一个值,变量arr是仅有的对这个值的引用，因此引用次数为1。尽管后面的代码没有用到arr，它还是会持续占用内存，我们需要 arr = null ;解除引用，就可以被回收了
        引用计数存在一个致命的缺陷，当对象间存在循环引用时，引用次数始终不会为0，因此垃圾回收器就不会释放它们。
    有垃圾回收机制不代表我们不用关注内存泄漏，那些很占空间的值，一旦不再用到，需要检查是否还存在对它们的引用，如果是的话，就必须手动解除引用
三、常见内存泄漏的情况
    1、意外的全局变量
    2、定时器
    3、闭包
    4、使用事件监听addEventListener监听，在不监听的情况下要使用removeEventListener取消对事件监听