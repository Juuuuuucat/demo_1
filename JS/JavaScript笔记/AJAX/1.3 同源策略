1、同源：如果两个页面的协议、域名和端口都相同，则两个页面同源；反之就是跨域。出现跨域的根本原因是浏览器的同源策略不允许非同源的URL之间进行资源的交互
2、同源策略：是浏览器提供的一个安全功能。就是A网站的JavaScript不允许和非同源的B网站之间进行资源交互。例如：
    无法读取非同源网页的Cookie、LocalStorage和IndexdDB
    无法接触非同源网页的DOM
    无法向非同源地址发送AJAX请求
浏览器对跨域请求的拦截：浏览器是允许我们发送跨域请求的，但是当接收跨域响应的数据时，会被浏览器同源策略拦截，无法被页面获取到。
AJAX是默认遵守同源策略的
3、实现跨域数据请求：主要有JSONP和CORS
    1、JSONP：出现的早，兼容性好，是前端程序员为了解决跨域问题想出来的一种临时解决方案。只支持GET请求，不支持POST请求。
        实现原理：由于浏览器的同源策略限制，网页中无法通过AJAX请求非同源的接口数据，但是<script>标签不受浏览器同源策略影响，因此可以通过<script>标签的src属性，请求非同源的js脚本，通过函数调用(一段JS代码)的形式，接收跨域接口响应回来的数据。
        如果返回的只是字符串，js引擎会报错，因为在script标签里只识别js代码形式
    JSONP与AJAX之间没有任何关系，JSONP并没有用到XMLHttpRequest这个对象
    2、CORS：属于跨域AJAX请求的根本解决方案，是W3C标准。支持GET和POST请求。缺点是不兼容某些低版本浏览器。主要在服务器端进行配置，客户端无须做额外的配置。
        实现原理：CORS是通过在响应式设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行
            response.setHeader("Access-Control-Allow-Origin",'允许的URL'); //*表示允许所有网站
4、防抖：当事件被触发后，延迟n秒后再执行回调，如果这n秒内事件又被触发，则重新计时。（王者回城，被打断重新）只有最后一次触发生效
    应用场景：用户在输入框中连续输入一串字符，可以通过防抖策略，只在输入完后，才执行查询请求，有效减少请求次数，节约请求资源。（通过定时器实现，只要触发就清除定时器，再调用防抖函数）
5、节流：减少一段时间内事件的触发频率（攻击的冷却时间）有选择性的执行一部分
    应用场景：鼠标不断触发某事件(点击),只在单位时间内触发一次；
    懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费CPU资源
    （节流阀为空，表示可以执行下次操作；不为空表示不能执行。当前操作执行完，必须将节流阀重置为空，表示可以执行下次操作了）