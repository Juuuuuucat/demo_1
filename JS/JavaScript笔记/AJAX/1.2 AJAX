一、AJAX能让我们轻松实现网页与服务器之间的数据交互，无刷新的和服务器进行交互
    AJAX( = 异步JavaScript和XML)是一种在无需重新加载整个网页的情况下，与服务器交换数据，对网页的某部分进行更新的技术
    传统的网页(不使用AJAX)如果需要更新内容，就必须重新加载整个网页
    AJAX的原理简单来说就是通过XMLHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用JavaScript来操作DOM而更新页面
二、AJAX典型应用场景
    1、注册用户时，通过AJAX的形式，动态检测用户名是否被占用
    2、当输入搜索关键字时，动态加载搜索提示列表
    3、当点击页码值，根据页码值动态刷新表格的数据
    4、数据的增删改查，实现数据的交互
三、特点
    优点：
        无需刷新页面而与服务器进行通信
        允许根据用户事件来更新部分页面内容
    缺点：
        没有浏览历史，不能回退
        存在跨域问题
        SEO不友好
三、实现过程
实现AJAX异步交互需要服务器逻辑进行配合，完成以下步骤：
    1、创建AJAX核心对象XMLHttpRequest对象（所有现代浏览器都支持，IE5+6使用ActiveXObject）
        let xhr = new XMLHttpRequest(); //初始化一个XMLHttpRequest实例对象
    2、通过open()方法规定请求类型、URL以及是否异步处理请求
        xhr.open(method,url,[async][,user][,password])
        method:请求的类型：常见的有GET,POST
        url:资源的地址
        async:布尔值，表示是否异步执行操作，默认为true执行异步操作；如果为false，则JS会等到服务器响应后才继续执行，如果服务器繁忙或缓慢，应用程序就会挂起或停止，这时不需要编写
        [user:可选的用户名用于认证用途，默认为null
        password:可选的密码用于认证用途，默认为null]

        不要忘了规定响应处于onreadystatechange事件中的就绪状态时执行的函数。onreadystatechange函数，直接在send语句后面编写操作。
        xhr对象通过onreadystatechange事件监听服务器的通信状态，主要是readyState属性
            请求所处的状态：
                0-请求未初始化,也就是对象已创建但还未调用open方法
                1-服务器连接已建立,open方法已调用
                2-请求已接收,send方法已调用，响应头也已被接收
                3-请求处理中,数据接受中，此时response属性中已经包含部分数据
                4-请求已完成且响应已就绪，意味着数据传输已彻底完成或失败
            status属性存放服务器响应的状态（200-'OK'，404-未找到页面）。当 readyState == 4 且status == 200 时，表示响应已就绪。
        每当readyState改变时，就会触发onreadystatechange事件，调用函数。因此在一次请求中这个事件会触发四次，分别是： 0-1、1-2、2-3、3-4，对应着 readyState 的每个变化。
    3、通过send()方法将请求发送到服务器
        xhr.send([body])
        body:仅用于POST请求中要发送的数据体，如果不传递数据则为null
    5、客户端接收并处理服务端响应的数据结果
        可以通过XMLHttpRequest对象的responseText或responseXML属性获得服务器的响应数据
        responseText 返回字符串形式的响应；
        responseXML 返回XML形式的响应数据，需要对其进行解析
    6、将处理结果更新到HTML页面中
四、实例
    function loadXML(){
        let xmlHTTP;
        if(window.XMLHttpRequest){
            // IE7+,Firefox,Chrome,Opera,Safari 浏览器支持
            xmlHTTP = new XMLHttpRequest();
        } else {
            // IE6, IE5
            xmlHTTP = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlHTTP.onreadystatechange = function() {
            if(xmlHTTP.readyState == 4 && xmlHTTP.status == 200){
                //响应成功执行代码
            }
        }
        xmlHTTP.open('GET','URL',true); //创建请求
        xmlHTTP.send(); //发送请求
    }

五、GET、POST
    1、GET请求参数一般通过URL传递，在地址栏可见，因此不能用于传递敏感信息。由于浏览器或服务器对URL长度的限制，因此在URL中添加的参数也是有长度限制的。通常用于获取服务器资源(向服务器要资源)
        xmlHTTP.open("GET","/js.com/search?q=AJAX&na=foem",true); //?后面就是查询参数(键值对),多个参数之间用&相连
        xmlHTTP.send();
    2、POST请求参数一般放在body中，在地址栏不可见，因此相对来说比较安全。POST传递的参数没有限制。通常用于向服务器提交数据。
        xmlHTTP.open("POST","/js.com/demo.html",true);
        xmlHTTP.setRequestHeader(header,value); //向请求添加HTTP头，header规定头名称；value规定头的值；固定写法('Content-Type','application/x-www-form-urlencoded')
        xmlHTTP.send('希望发送的数据')
六、URL编码
    URL地址中，只允许出现英文相关的字母、标点符号、数字，不允许出现中文，如果需要，则必须对中文字符进行编码(转义),也就是使用英文字符去表示非英文字符，比如 西-->%E8%A5%BF
    encodeURL() 编码
    decodeURL() 解码
七、数据交换格式JSON
    JSON是JavaScript对象和数组的字符串表示法，使用文本表示一个JS对象或数组的信息，因此JSON的本质是字符串。不能写注释!
    1、对象结构：用{}括起来的内容，依然是键值对结构，但是key必须是使用英文的"双引号"包裹的字符串；value可以是数字、字符串、布尔值、null、数组、对象6种类型，其中字符串也用双引号，数组中如果有字符串也用双引号，不能出现undefined，用null替代，也不能出现function
    2、数组结构：用[]括起来的内容，可以是数字、字符串、布尔值、null、数组、对象6种类型，记得用双引号
    3、JSON和JS对象
        JSON--->JS JSON.parse(JSON字符串)
        JS--->JSON JSON.stringify(JS对象)
八、XMLHttpRequest新增属性
    1、有时AJAX操作很耗时，并且无法预知要花多少时间。timeout属性，可以设置HTTP请求的时限：
        xhr.timeout = 3000; //表示最长等待时间为3000毫秒，超过这个时限就自动停止HTTP请求。
        xhr.ontimeout = function(){}; //和上面配套，超时回调函数
    2、网络异常回调
        xhr.onerror = function(){}; //断网时执行
    3、取消请求：在发送请求，还没有得到响应时，可以调用方法取消请求
        xhr.abort();
九、Axios是专注于网络数据请求的库，本质上也是对原生XHR的封装，只不过是Promise的实现版本。
    1、axios发起GET请求：
    axios.get('URL',{params: {参数} }).then(callback函数)
    2、axios发起POST请求
    axios.post('URL',{参数}).then(callback函数)
    3、直接使用axios发起请求
    axios({
        method:
        url:
        [params:{} //GET请求参数需要通过patams属性提供]
        [data:{}   //POST数据要通过data属性提供]
    }).then(callback函数)