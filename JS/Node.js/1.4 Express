1、Express
    Express是基于Node.js平台，快速、开放、极简的web开发框架，和Node.js内置的http模块类似，是基于后者的一个封装，专门用来创建web服务器。
    本质就是一个npm上的第三方包，提供了快速创建web服务器的便捷方法。
    常见的两种服务器：web网站服务器：专门对外提供web网页资源的服务器。API接口服务器：专门对外提供API接口的服务器。使用Express，我们可以方便、快速的创建web网站的服务器或API接口的服务器。
2、创建基本的web服务器
    const express = require('express');
    // 1、导入express
    const app = express();
    // 2、创建web服务器
    app.listen(80, () => {
        console.log('express server running at http')
    })
    // 3、调用app.listen(端口号, 启动成功后的回调函数)，启动服务器  
3、监听GET/POST请求
    通过app.get()方法，可以监听客户端的GET请求
        app.get('URL', function(req, res){ //URL是客户端请求的URL地址；后面是请求对应的处理函数，其中req是请求对象，res是响应对象
            //处理函数
        })
    通过app.POST()方法，可以监听客户端的POST请求
        app.post('URL', function(req, res){ 
            //处理函数
        })
    通过app.send()方法把处理好的内容，发送给客户端
    req.query可以获得客户端发送的查询参数；默认情况下，req.query是空对象
    通过req.params对象，可以访问URL中，通过 :参数名 的形式匹配到的动态参数
4、express.static()托管静态资源
    通过这个函数，我们可以非常方便的创建一个静态资源服务器。
        app.use(express.static('public')); //这样可以访问到public目录下的所有文件；express在指定的静态目录中查找文件，并对外提供资源的访问路径，因此存放静态文件的目录名不会出现在URL中。
        app.use('/file', express.static('public')) //这样将file挂载到路径前缀，可以通过带有/file前缀地址来访问public目录中的文件。
5、在每次修改代码后，我们都需要手动重新启动服务器代码，非常繁琐。可以使用nodemon这个工具，它可以监听项目文件的变动；当代码被修改后，nodemon会自动帮我们重启项目，极大方便了开发和调试。
    使用nodemon替换node来运行