1、路由：就是映射关系；在Express中，路由就是指客户端的请求与服务器处理函数之间的映射关系
    Express中的路由由3部分组成：请求的类型、请求的URL地址、处理函数。格式如下：
        app.METHOD(PATH, HEADLER); //例如之前写的get/post请求，就是简单的路由
2、路由的匹配过程
    每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。
    在匹配时，会按照路由的顺序进行匹配，如果请求类型和请求的URL地址同时匹配成功，则Express会将这次请求，转交给对应的处理函数进行处理。注意：
        1、按照定义的先后顺序进行匹配
        2、请求类型和请求的URL同时匹配成功，才会调用函数
3、路由的使用
    最简单的方式就是把路由挂载到app上（app就是之前调用express()函数返回的实例）
4、模块化路由
    为了方便对路由进行模块化的管理，不建议直接挂载到app上，推荐将路由抽离为单独的模块;
        1、创建路由模块对应的.js文件
        2、调用express.Router()函数创建路由对象
        3、向路由对象上挂载具体的路由
        4、使用module.exports向外共享路由对象
        5、使用app.use()函数注册路由模块 //注意app.use()函数的作用就是来注册全局中间件
5、中间件
    举个生活中的例子，在处理污水时，一般要经过三个处理环节，这三个中间处理环节就可以叫做中间件。上一级的输出作为下一级的输入。
    当一个请求到达Express的服务器后，可以连续调用多个中间件，对这次请求进行预处理。本质上就是一个function处理函数，中间件函数的形参列表中，必须包含next参数，不带next参数的函数一般是路由处理函数。
    next函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由。
        1、简单的中间件函数
            const mw = function(req, res, next){
                next(); //把流转关系转交给下一个中间件或路由
                //一定不要忘了next()函数调用！！！
            }
        2、全局生效的中间件：客户端发起的任何请求到达服务器后，都会触发的中间件
            通过调用app.use(mw)，就可以定义一个全局生效的中间件。或者：app.use((req, res, next)=>{//next()})
            再使用app.use(mw2)，就可以实现定义多个全局中间件。
            当客户端请求到达服务器之后，就会按照中间件定义的先后顺序依次进行调用。
        3、局部生效的中间件
            不使用app.use，在挂载路由的时候，将中间件函数作为参数
                app.get('/', mw1, (req, res)=>{ //}) //当请求和地址匹配时，会先调用这个中间件函数，然后将处理的结果交给后面的处理函数
                app.get('/', mw1, mw2, (req, res)=>{ //}) //可以调用多个中间件函数。还可以写为[mw1, mw2],
6、中间件的作用
    多个中间件之间，共享着同一份req和res，基于这个特性，我们可以在上游的中间件中，统一为req和res对象添加自定义的属性和方法，供下游的中间件或路由进行使用
    注意：一定要在路由之前定义中间件函数；不要忘记最后调用next()函数，调用next()函数后不要再写额外的代码，防止代码逻辑混乱
7、中间件的分类
    1、应用级别中间件：绑定到app实例上的中间件，包括全局和局部中间件
    2、路由级别中间件：绑定到express.Router()实例上的中间件，用法和应用级别中间件没有区别，只不过一个绑定到app实例上，一个绑定到router实例上
    3、错误级别中间件：专门用来捕获整个项目中发生的异常错误，防止程序的崩溃。处理函数中必须有4个参数(err, req, res, next)；并且必须注册在所有路由后面！！也不必调用next函数。
    4、Express内置中间件
    5、第三方中间件