一、好处
    1、浏览器是JavaScript的前端运行环境，Node.js是JavaScript的后端运行环境；Node.js中无法调用DOM和BOM等浏览器内置API
    2、Node.js作为一个JavaScript的运行环境，仅仅提供了基础的功能和API，但是基于这些基本功能，可以使用很多强大的工具和框架，能够胜任更多工作
二、安装
    LTS为长期稳定版本；Current为新特性尝鲜版，可能会有bug。
    查看已安装好的node.js版本号 node -v
    运行写好的js文件 node 文件路径
三、fs文件系统模块
    fs文件系统模块是Node.js提供的、用来操作文件的模块，需要通过require函数导入
        const fs = require('fs');
        fs.readFile(path[,option],callback);
        //读取指定文件中的内容。path表示文件路径，option表示以什么编码格式读取，callback是文件读取完成后，拿到读取失败或成功的结果
        //如果读取成功，则error为null；如果读取失败，则error为错误对象，data为undefined
        fs.writeFile(path,data[,option],callback);
        //向指定的文件中写入内容,data是要写入的内容
        //如果写入成功，则error为null；如果写入失败，则error为错误对象，如果在当前目录下没有那个文件，则它会创建一个新文件并写入内容。注意，这个方法写入时会替换掉文件原来的内容，并不是追加内容
    存在一个路径动态拼接的问题：在使用js模块操作文件时，如果提供的路径是相对路径，很容易出现路径动态拼接错误的问题。这是因为代码运行时，会以执行node命令时所处的目录，动态拼接出被操作文件的完整路径，我们可以直接提供绝对路径防止这个问题，但是移植性特别差，不利于维护
    可以通过__dirname获取当前文件所处的目录，以及下面的path路径操作，更好的解决上面那个问题。
四、path路径模块
    path路径模块是Node.js提供的、用来处理路径的模块，需要通过require函数导入；涉及路径拼接的问题，建议用path模块操作，不建议直接用+
        const path = require('path');
        path.join('/a/b','../',...) //经多个路径片段拼接成一个完整的路径；../会抵消前面一级路径
        path.basename(path[,ext]) //获取路径中的最后一部分，通常用来获取路径中的文件名。ext表示文件的扩展名；返回的是路径中的最后一部分
        path.extname(path) //获取路径中的扩展名
五、HTTP模块
    HTTP模块是Node.js官方提供的、用来创建web服务器的模块。通过模块提供的http.createServer()方法，就能方便的把一台普通的电脑，变成一台web服务器，从而对外提供web资源服务。
    创建web服务器的基本步骤：
        1、导入http模块
            const http = require('http');
        2、创建web服务器实例
            const server = http.createServer();
        3、为服务器实例绑定request请求事件，监听客户端的请求
            server.on('request', callback)
            //事件处理函数接收req请求对象，可以访问与客户端相关的数据或属性
            //还可以通过response响应对象，访问与服务器相关的数据或属性res.end(内容);向客户端发送指定内容并结束这次请求的处理过程
            //当调用end方法向客户端发送中文内容时，会出现乱码问题，此时，需要手动设置内容的编码格式res.setHeader('Content-Type','text/html: charset=utf-8')
        4、启动服务器
            server.listen(端口号, callback)