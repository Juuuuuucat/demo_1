Vue脚手架就是Vue官方提供的标准化开发工具（开发平台）
切换到创建项目的目录，使用命令创建项目 vue create xxx ，然后选择使用的Vue版本
  启动项目：npm run serve
  打包项目：npm run build

脚手架创建之后的文件结构：
  .文件目录
  |-node_modules
  |-public
    |-favicon.ico //页签图标
    ┕-index.html  //主页面
  |-src
    |-assets  //存放静态资源
      ┕-logo.png
    |-component //存放组件
      ┕-HelloWorld.vue
    |-App.vue //汇总所有组件
    ┕-main.js //入口文件
  |-.gitignore  //git版本管制忽略的配置
  |-babel.config.js //babel的配置文件
  |-package.json  //应用包配置文件
  |-package-lock.json //包版本控制文件
  ┕-README.md //应用描述文件

在main.js中的Vue实例中传入了一个render函数
  render: h => h(App) //这个函数完成了将App组件放入Vue实例挂载的容器中
  完整形式是：
    render(createElement){
      return createElement(App)
    }

vue.config.js配置文件
  1、使用vue inspect > output.js可以查看到Vue脚手架的默认配置
  2、使用vue.config.js可以对脚手架进行个性化定制，在官网中可以找到

标签或组件的ref属性 <xxx ref="yyy">
  1、被用来给元素或子组件注册引用信息（id的替代者）
  2、应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）
  3、使用方式：
    打标识：<h1 ref="xxx">demo</h1> 或 <School ref-"xxx"><School>
    获取：this.$refs.xxx

父组件给子组件传值：父组件在使用子组件的时候，在标签中写明要传值的属性，然后子组件中加props属性进行接收显示（也就是让组件接收外部传过来的数据）
  1、传递数据：<Demo name="xxx" :age="18"/>
  2、接收数据：
    props: ['name','age','sex'...] //简单声明接收
    props: { //接收的同时对数据进行类型限制
      name:String,
      age:Number,
      sex:String
    }
    //接收的同时对数据进行 类型限制 + 默认值指定 + 必要性限制
    props: {
      name:{
        type:String, //类型
        requires:true //是否必须
      },
      age: {
        type:Number,
        default:20 //若没有传值的默认值
      },
      sex: {
        type:String,
        required:true
      }
    }
  备注：props优先级更高，会先收到传的数据，在组件的data、methods属性中也可以用
        props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若确实需要修改，那么需要将props的内容复制到data里，然后去修改data中的数据
  可以通过父组件给子组件传递函数类型的props实现：子给父传递数据
mixins配置项
  功能：可以把多个组件共用的配置提取成一个混入对象
  使用方式：
    第一步，定义混合，例如：
      {
        data(){...},
        methods:{...},
        ...
      }
    第二步，使用混合，例如：
      1、全局混入：Vue.mixin(xxx)
      2、局部混入：mixins:[xxx]

插件：用于增强vue
本质上是包含install方法的一个对象，install的第一个参数是Vue，之后的参数是插件使用者传递的数据
  定义插件：
    对象.install = funciton(Vue, options){
      //添加全局过滤器
      Vue.filter(...)
      //添加全局指令
      Vue.directive(...)
      //配置全局混入
      Vue.mixin(...)
      //添加实例方法
      Vue.prototype.$myMethod = function(){...}
    }
  使用插件：Vue.use(xxx)

多个组件如果直接利用类名设置样式，类名如果有重复，则组件的样式按后引用的组件样式
<style scoped> 可以使这个样式只应用到这个组件（让样式在局部生效，避免冲突）